<!doctype lake><h1>使用 CLI 创建初始化项目</h1><h2 id="a588c069">第一步 安装<span style="color: #2C3E50;"> </span><a href="https://github.com/umijs/create-umi" target="_blank">create-umi</a></h2><p><br /></p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%24%20yarn%20global%20add%20create-umi%5Cn...%5Cnsuccess%20Installed%20%5C%22create-umi%400.6.0%5C%22%20with%20binaries%3A%5Cn%20%20%20%20%20%20-%20create-umi%5Cn%E2%9C%A8%20%20Done%20in%2036.07s.%22%7D"></card><p><br /></p><p>create-umi 主要是用来使用命令行创建 umi 相关的库或者项目。命令中打印 success 说明安装成功，如果你还需要进一步确认，可以执行 <code>create-umi -v</code> 来查看 create-umi 的版本号。</p><p><br /></p><p><br /></p><h2 id="15de1c17">第二步 使用 create-umi 新建项目</h2><p><br /></p><blockquote><ul><li>第一个选项 <code>Select the boilerplate type</code> 选择 <code>app</code> </li><li>如果你遇到了 <code>Do you want to use typescript?</code> 选项，根据你的情况选择是否使用 TypeScript</li></ul></blockquote><p><br /></p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%24%20cd%20%E4%BD%A0%E7%9A%84%E5%B8%B8%E7%94%A8%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%5Cn%24%20create-umi%20hero%5Cn%3F%20What%20functionality%20do%20you%20want%20to%20enable%3F%20(Press%20%3Cspace%3E%20to%20select%2C%20%3Ca%3E%20to%20tog%5Cngle%20all%2C%20%3Ci%3E%20to%20invert%20selection)%5Cn%20%E2%97%89%20antd%5Cn%E2%9D%AF%E2%97%89%20dva%5Cn%20%E2%97%AF%20code%20splitting%5Cn%20%E2%97%AF%20dll%5Cn%20%E2%97%AF%20hard%20source%22%7D"></card><blockquote><p>这里的 hero 指是项目名，你可以输入任意的名字。</p></blockquote><p><br /></p><p>create-umi 提供定制化能力，你可以通过空格键来选中你需要的功能，然后通过敲击回车键开始创建项目。这里我们选中 antd 和 dva 就好。</p><p><br /></p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%3F%20What%20functionality%20do%20you%20want%20to%20enable%3F%20antd%2C%20dva%5Cn%20%20%20create%20package.json%5Cn%20%20%20create%20mock%2F.gitkeep%5Cn%20%20%20create%20src%2Fassets%2Fyay.jpg%5Cn%20%20%20create%20src%2Flayouts%2Findex.css%5Cn%20%20%20create%20src%2Flayouts%2Findex.js%5Cn%20%20%20create%20src%2Fpages%2Findex.css%5Cn%20%20%20create%20src%2Fpages%2Findex.js%5Cn%20%20%20create%20src%2Fglobal.css%5Cn%20%20%20create%20.gitignore%5Cn%20%20%20create%20.editorconfig%5Cn%20%20%20create%20.env%5Cn%20%20%20create%20.umirc.js%5Cn%20%20%20create%20.eslintrc%5Cn%20%20%20create%20.prettierrc%5Cn%20%20%20create%20.prettierignore%5Cn%20%20%20create%20src%2Fmodels%2F.gitkeep%5Cn%20%20%20create%20src%2Fapp.js%5Cn%F0%9F%93%8B%20%20Copied%20to%20clipboard%2C%20just%20use%20Ctrl%2BV%5Cn%E2%9C%A8%20%20File%20Generate%20Done%22%7D"></card><p><br /></p><p>如果你的命令行打印的日志如上，说明新建项目完成了，如果有其他的错误，可以确认一下当前目录下是否已经存在 hero 文件夹。你需要注意 create-umi 会自动帮你新建 hero 文件夹。</p><p><br /></p><p><br /></p><h2 id="5e02b899">第三步 切换到项目目录，安装依赖</h2><p><br /></p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%24%20cd%20hero%5Cn%24%20yarn%20%5Cn...%E8%BF%99%E4%B8%AA%E8%BF%87%E7%A8%8B%E9%9C%80%E8%A6%81%E4%B8%80%E4%BA%9B%E6%97%B6%E9%97%B4%5Cnsuccess%20Saved%20lockfile.%5Cn%E2%9C%A8%20%20Done%20in%20170.43s.%22%7D"></card><p><br /></p><p>看到命令行打印 success，一般就是安装成功了，但是有时候因为一些网络问题，会出现丢包的情况，需要你重新运行 <code>yarn</code> 验证是否全部安装成功。</p><p><br /></p><p><br /></p><h2 id="4ffbe96e">第四步 启动开发服务器</h2><p><br /></p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%24%20yarn%20start%5Cn%E2%9C%94%20success%20webpack%20compiled%20in%202s%20743ms%5Cn%20DONE%20%20Compiled%20successfully%20in%202750ms%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2010%3A24%3A03%5Cn%5Cn%5Cn%20%20App%20running%20at%3A%5Cn%20%20-%20Local%3A%20%20%20http%3A%2F%2Flocalhost%3A8000%2F%20(copied%20to%20clipboard)%5Cn%20%20-%20Network%3A%20http%3A%2F%2F192.168.199.195%3A8000%2F%22%7D"></card><p><br /></p><p>你可以通过浏览器访问 http://localhost:8000/ 来查看页面：</p><p><br /></p><p><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2018%2Fpng%2F123174%2F1543976809778-2d1a60e0-1ae6-4c17-a812-51d6d0b52aad.png%22%2C%22originWidth%22%3A2650%2C%22originHeight%22%3A1528%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A747%2C%22height%22%3A430%7D"></card></p><p><br /></p><p>还不错吧！😁</p><p><br /></p><p><br /></p><h2 id="1febcf16">错误说明</h2><p>如果，你的表现和上面的不同，你可以通过比对下面两个情况来修正。</p><p>1. 打印如下</p><p><br /></p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%3F%20message%20Probably%3A%5Cn%20%20%2Fusr%2Flocal%2Fbin%2Fnode%20%2FUsers%2Fxiaohuoni%2FDocuments%2F***%2F***%2Fnode_module%5Cns%2Fumi%2Flib%2Fscripts%2FrealDev.js%20dev%20(pid%20928)%5Cn%20%20in%20%2FUsers%2Fxiaohuoni%2F***%2F***%2F%5Cn%5CnWould%20you%20like%20to%20run%20the%20app%20on%20another%20port%20instead%3F%20(Y%2Fn)%22%7D"></card><p><br /></p><p>这个问题可能是因为你的其他项目或应用已经占用了 umi 默认的 8000 端口，你只要输入 Y 并回车，umi 将在另一个空闲端口上启动服务，最终访问路径以输出日志为准。</p><p><br /></p><p>2. 其他情况</p><ul><li><p>可能是 Node.js 版本问题引起的，确认一下你的开发环境。</p></li></ul><ul><li><p>网络问题引起部分依赖安装失败，可能需要科学上网，或者使用国内源，例如 <a href="http://npm.taobao.org/package/tyarn" target="_blank">tyarn</a>。</p></li></ul><p><br /></p><p><a href="https://github.com/xiaohuoni/umi-course/blob/master/doc/06.md" target="_blank">在 GitHub 上编辑此页<cursor /></a></p>