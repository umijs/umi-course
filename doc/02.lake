<!doctype lake><h1>五分钟掌握最小知识体系</h1><blockquote><p>声明：文中知识体系目录来自 <a href="https://github.com/dvajs/dva-knowledgemap" target="_blank">dva.js 知识导图</a></p></blockquote><p>本文阅读时间大概为 5 分钟，但是能让你了解基于 umi 和 dva 构建项目的最小知识体系，你可以粗略的浏览一下本文所提到的知识，在后续的讲解中都会多次重复提起，保证学习效率。</p><p><br /></p><p>由于现在前端工程化的流行，所以在学习一个新的框架时，可能会面临一些疑惑。</p><p><br /></p><p>拿 react 举例：</p><ul><li><p>es6 特性好多啊（es5 我都还没学完呢）</p></li></ul><ul><li><p>component 有三种写法（茴字的四种写法了解一下）</p></li></ul><ul><li><p>webpack 是什么（前端构建工具，然后呢，webpack是什么？）</p></li></ul><ul><li><p>什么同步异步数据流（我 callback 都理不清楚）</p></li></ul><ul><li><p>...</p></li></ul><p><br /></p><p><br /></p><card type="block" name="hr"></card><h2 id="1b2d670f"><span style="font-size: 24px;">ECMAScript 6</span></h2><h3 id="54add7f5">变量声明</h3><p><code>const</code> 用于声明常量，<code>let</code> 用于声明变量，他们都是块级作用域。</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20a%20%3D%201%3B%5Cnlet%20b%20%3D%201%3B%22%7D"></card><p><br /></p><p><br /></p><h3 id="c0a93715">模板字符串</h3><p>用于拼接字符串。</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20a%20%3D%20'hello'%3B%5Cnlet%20b%20%3D%20'hello'%3B%5Cnconsole.log('print%3A'%20%2B%20a%20%2B%20b)%3B%5Cn%5Cnlet%20c%20%3D%20%60print%3A%24%7Ba%7D%24%7Bb%7D%60%5Cn%2F%2F%20%E6%B3%A8%E6%84%8F%E8%BF%99%E4%B8%AA%E4%B8%8D%E6%98%AF%E5%BC%95%E5%8F%B7%EF%BC%8C%E9%94%AE%E7%9B%98%20esc%20%E4%B8%8B%E9%9D%A2%E9%82%A3%E4%B8%AA%E6%8C%89%E9%94%AE%22%7D"></card><p><br /></p><p><br /></p><h3 id="2171d1b0">默认参数</h3><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20test(a%20%3D%20'world')%20%7B%5Cn%20%20%20%20console.log(%60print%3Ahello%2C%24%7Ba%7D%60)%3B%5Cn%7D%5Cntest()%3B%5Cn%2F%2F%20print%3Ahello%2Cworld%22%7D"></card><p><br /></p><p><br /></p><h3 id="d86f8699">箭头函数</h3><p>函数的简化写法。</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20test(a%20%3D%20'world')%20%7B%5Cn%20%20%20%20console.log(%60print%3Ahello%2C%24%7Ba%7D%60)%3B%5Cn%7D%5Cn%5Cnconst%20test%20%3D%20(a%20%3D%20'world')%20%3D%3E%20%7B%5Cn%20%20%5Ctconsole.log(%60print%3Ahello%2C%24%7Ba%7D%60)%3B%5Cn%7D%3B%22%7D"></card><p><br /></p><p><br /></p><h3 id="a6ad927e">模块的导入和导出</h3><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E4%BB%8E%20antd%20%E4%B8%AD%E5%AF%BC%E5%85%A5%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6%5Cnimport%20%7B%20Button%20%7D%20from%20'antd'%3B%5Cn%5Cn%2F%2F%20%E5%AF%BC%E5%87%BA%E4%B8%80%E4%B8%AA%E6%96%B9%E6%B3%95%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E8%83%BD%E5%9C%A8%E5%85%B6%E4%BB%96%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8%20%60import%60%20%E5%AF%BC%E5%85%A5%E4%BD%BF%E7%94%A8%E4%BA%86%5Cnconst%20test%20%3D%20(a%20%3D%20'world')%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(%60print%3Ahello%2C%24%7Ba%7D%60)%3B%5Cn%7D%3B%5Cnexport%20default%20test%3B%22%7D"></card><p><br /></p><p><br /></p><h3 id="277933a4">析构赋值</h3><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20obj%20%3D%20%7B%20key%3A%20'umi'%2C%20author%3A%20'sorrycc'%20%7D%3B%5Cnconsole.log(obj.key)%3B%5Cn%5Cnconst%20%7B%20key%20%7D%20%3D%20obj%3B%5Cn%2F%2F%20%E7%AD%89%E4%BB%B7%E4%BA%8E%20%60const%20key%20%3D%20obj.key%3B%60%5Cn%5Cnconst%20obj2%20%3D%20%7B%20key%20%7D%3B%5Cn%2F%2F%20%E7%AD%89%E4%BB%B7%E4%BA%8E%20%60const%20obj2%20%3D%20%7B%20key%3A%20key%20%7D%3B%60%3B%5Cn%5Cn%2F%2F%20%E6%95%B0%E7%BB%84%E4%B9%9F%E6%9C%89%E7%B1%BB%E4%BC%BC%E7%9A%84%E7%94%A8%E6%B3%95%5Cnconst%20arr%20%3D%20%5B1%2C%202%5D%3B%5Cnconst%20%5Bfoo%2C%20bar%5D%20%3D%20arr%3B%5Cnconsole.log(foo)%3B%5Cn%2F%2F%201%22%7D"></card><p><br /></p><p><br /></p><h3 id="a467a85f">展开运算符</h3><p>用于数组组装：</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20arr%20%3D%20%5B'umi'%5D%3B%5Cnconst%20texts%20%3D%20%5B...arr%2C%20'dva'%5D%3B%5Cn%2F%2F%20texts%20%3D%3E%20%5B'umi'%2C%20'dva'%5D%22%7D"></card><p><br /></p><p>用于取出数组部分属性：</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20arr%20%3D%20%5B'umi'%2C%20'dva'%2C%20'antd'%5D%3B%5Cnconst%20%5Bumi%2C%20...other%5D%20%3D%20arr%3B%5Cn%2F%2F%20%E5%89%8D%E9%9D%A2%E5%B7%B2%E7%BB%8F%E6%8F%90%E8%BF%87%E6%9E%90%E6%9E%84%E8%B5%8B%E5%80%BC%EF%BC%8C%E6%89%80%E4%BB%A5%E7%AC%AC%E4%B8%80%E9%A1%B9%E4%BC%9A%E8%B5%8B%E5%80%BC%E7%BB%99%20%60umi%60%EF%BC%8C%E5%89%A9%E4%B8%8B%E7%9A%84%E4%BC%9A%E8%A2%AB%E7%BB%84%E5%90%88%E6%88%90%E4%B8%80%E4%B8%AA%20%60other%60%20%E6%95%B0%E7%BB%84%5Cnconsole.log(umi)%3B%5Cn%2F%2F%20umi%5Cnconsole.log(other)%3B%5Cn%2F%2F%20(2)%5B'dva'%2C%20'antd'%5D%22%7D"></card><p><br /></p><p>用于组合新的对象，key 相同时，靠后展开的值会覆盖靠前的值：</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20obj%20%3D%20%7B%20a%3A%201%2C%20b%3A%202%20%7D%3B%5Cnconst%20obj2%20%3D%20%7B%20b%3A%203%2C%20c%3A%204%20%7D%3B%5Cnconst%20obj3%20%3D%20%7B%20...obj%2C%20...obj2%20%7D%3B%5Cn%2F%2F%20obj3%20%3D%3E%20%7B%20a%3A%201%2C%20b%3A%203%2C%20c%3A%204%20%7D%22%7D"></card><p><br /></p><p><br /></p><card type="block" name="hr"></card><h2 id="JSX"><span style="font-size: 24px;">JSX</span></h2><h3 id="e930f012">组件嵌套</h3><p>类似 html 。</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%3Capp%3E%5Cn%20%20%3CHeader%20%2F%3E%5Cn%20%20%3CFooter%20%2F%3E%5Cn%3C%2Fapp%3E%22%7D"></card><p><br /></p><p><br /></p><h3 id="className">className</h3><p><code>class</code> 是 Javascript 的保留词，所以添加样式类名时，需用 <code>className</code> 代替 <code>class</code> 。</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%3Ch1%20className%3D%5C%22fancy%5C%22%3EHello%20Umi%3C%2Fh1%3E%22%7D"></card><p><br /></p><p><br /></p><h3 id="ebc26d95">JavaScript 表达式</h3><p>JavaScript 表达式需要用 <code>{}</code> 括起来，会执行并返回结果。 </p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%3Ch1%3E%7Bthis.props.title%7D%3C%2Fh1%3E%22%7D"></card><p><br /></p><h4 id="ee656aa1">注释</h4><p>尽量不要使用 <code>//</code> 做单行注释。</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%3Ch1%3E%5Cn%20%20%7B%2F*%20multiline%20comment%20*%2F%7D%5Cn%20%20%7B%2F*%5Cn%20%20%20%20multi%5Cn%20%20%20%20line%5Cn%20%20%20%20comment%5Cn%20%20%20%20*%2F%7D%5Cn%20%20%7B%5Cn%20%20%20%20%2F%2F%20single%20line%5Cn%20%20%7D%5Cn%20%20Hello%5Cn%3C%2Fh1%3E%22%7D"></card><p><br /></p><h4 id="b3727bdf">理解 CSS Modules</h4><p><strong>示例</strong>：</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20styles%20from%20'.%2Fexample.css'%3B%5Cnconst%20Example%20%3D%20(%3Cbutton%20className%3D%7Bstyles.button%7D%3EClick%20me%3C%2Fbutton%3E)%3B%5Cn%2F**%5Cn%20*%20.button%20%7B%5Cn%20*%20%20%20background-color%3A%20%231890ff%3B%5Cn%20*%20%7D%5Cn%20*%2F%22%7D"></card><p><br /></p><p>你不必理解 CSS Modules 的工作原理，只需要知道 <code>import from</code><span> 使得被引用的样式文件可以只作用在引用它的地方，而不会全局生效。例如</span><span>上述示例的 </span><code>styles.button</code><span> 在构建之后可能会被重命名为 </span><code>ProductList_button_1FU0u</code><span> ，而不再是 </span><code>button</code><span> ； </span><code>ProductList_button_1FU0u</code><span> 是全局生效的，而 </span><code>styles.button</code><span> 只在当前文件有效。这样，</span><strong>你可以为样式类名起一个简短的描述性名字，而不需要关心命名冲突问题。</strong></p><p><br /></p><p><br /></p><card type="block" name="hr"></card><h2 id="Dva"><span style="font-size: 24px;">Dva</span></h2><h3 id="Model">Model</h3><p><span>在 umi 项目中，你可以使用 dva 来处理数据流，以响应一些复杂的交互操作。这些处理数据流的文件统一放</span>在 models 文件夹下，每一个文件默认导出一个对象，里面包含数据和处理数据的方法，通常我们称之为 model 。一个 model 文件的结构一般是这样的：</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20%7B%5Cn%20%20%20%20namespace%3A%20'example'%2C%20%2F%2F%20%E8%BF%99%E4%B8%AA%20model%20%E7%9A%84%E5%90%8D%E5%AD%97%EF%BC%8C%E5%BF%85%E9%A1%BB%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80%5Cn%20%20%20%20state%3A%20%7B%5Cn%20%20%20%20%20%20%20%20count%3A%200%2C%5Cn%20%20%20%20%7D%2C%20%2F%2F%20%E5%88%9D%E5%A7%8B%E6%95%B0%E6%8D%AE%5Cn%20%20%5Ctreducers%3A%20%7B%5Cn%20%20%20%20%20%20%5Ctsave()%20%7B%20...%20%7D%2C%5Cn%20%20%20%20%7D%2C%20%2F%2F%20%E7%94%A8%E4%BA%8E%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20effects%3A%20%7B%5Cn%20%20%20%20%20%20%5Ct*getData()%20%7B%20...%20%7D%2C%5Cn%20%20%20%20%7D%2C%20%2F%2F%20%E7%94%A8%E4%BA%8E%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20subscriptions%3A%20%7B%5Cn%20%20%20%20%20%20%5Ctsetup()%20%7B%20...%20%7D%2C%5Cn%20%20%20%20%7D%2C%20%2F%2F%20%E7%94%A8%E4%BA%8E%E8%AE%A2%E9%98%85%E6%95%B0%E6%8D%AE%5Cn%7D%22%7D"></card><p><br /></p><p><br /></p><h3 id="Reducer">Reducer</h3><p>每一个 <a href="https://dvajs.com/guide/concepts.html#reducer" target="_blank">reducer</a> 都是一个普通函数，接受 state 和 action 作为参数，<span>即：</span><code>(state, action) =&gt; state</code> ，你可以在函数中更改旧的 state，返回新的 state 。</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22reducers%3A%20%7B%5Cn%20%20%20%20save(state%2C%20%7B%20payload%20%7D)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20(%7B%20...state%2C%20...payload%20%7D)%3B%5Cn%20%20%20%20%7D%2C%5Cn%7D%2C%22%7D"></card><p><br /></p><p><br /></p><h3 id="Effect">Effect</h3><p>每一个 <a href="https://dvajs.com/guide/concepts.html#effect" target="_blank">effect</a> 都是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*" target="_blank">生成器函数</a> ，你可以在这里获取你需要的数据，例如向服务器发起一个请求、或是获取其他 model 里的 state 。为了明确分工，你无法在 effect 中直接修改 state ，但你可以通过 <a href="https://www.yuque.com/hele/react/nwb3ff#put" target="_blank">put 方法</a> 调用 <span>reducer 来修改 state 。</span></p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22state%3A%7B%5Cn%20%20%20%20assets%3A%7B%7D%2C%5Cn%7D%2C%5Cn*changeAssets(%7B%20payload%20%7D%2C%20%7B%20call%2C%20put%2C%20select%20%7D)%20%7B%5Cn%20%20%20%20const%20user%20%3D%20yield%20select(states%20%3D%3E%20states.user)%3B%5Cn%20%20%20%20const%20assets%20%3D%20yield%20call(fetchData%2C%20user)%3B%5Cn%20%20%20%20yield%20put(%7B%20type%3A%20'save'%2C%20payload%3A%20%7B%20assets%20%7D%20%7D)%3B%5Cn%7D%2C%22%7D"></card><p><br /></p><h4 id="select">select</h4><p>此方法用于获取当前或其他 model 的 state 。</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20data%20%3D%20yield%20select(states%20%3D%3E%20states%5Bnamespace%5D)%3B%22%7D"></card><p><br /></p><h4 id="call">call</h4><p><span>此方法用于<span class="lake-fontsize-12" style="color: #2C3E50;">执行一个异步函数</span>，可以理解为等待这个函数执行结束。项目中常用于发送 http 请求，等待服务端响应数据。</span></p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20data%20%3D%20yield%20call(doSomethingFunc%2C%20parameter)%3B%22%7D"></card><p><br /></p><h4 id="put">put</h4><p><span>此方法用于触发一个 <span>action</span>，这个 <span>action 既</span>可以是一个 reducer 也可以是一个 effect 。</span></p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22yield%20put(%7B%20type%3A%20'reducerName'%2C%20payload%3A%20%7B%20page%20%7D%20%7D)%3B%22%7D"></card><p><br /></p><p><br /></p><h3 id="Subscription">Subscription</h3><p><a href="https://dvajs.com/guide/concepts.html#subscription" target="_blank">subscription</a> 用于订阅一个数据源，根据需要使用 dispatch 触发相应的 action。数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等。
项目中常用于页面初始化数据的自动请求，如：</p><p><br /></p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22subscriptions%3A%20%7B%5Cn%20%20%20%20setup(%7B%20dispatch%2C%20history%20%7D)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20history.listen((%7B%20pathname%2C%20query%20%7D)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%BF%9B%E5%85%A5%20'%2Fhome'%20%E8%B7%AF%E7%94%B1%EF%BC%8C%E5%8F%91%E8%B5%B7%E4%B8%80%E4%B8%AA%E5%90%8D%E5%8F%AB%20'query'%20%E7%9A%84%20effect%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(pathname%20%3D%3D%3D%20'%2Fhome')%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20dispatch(%7B%20type%3A%20'query'%20%7D)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%2C%5Cn%7D%2C%22%7D"></card><p><br /></p><p>(model,page和其他)</p><p><br /></p><h3 id="d41d8cd9"><br /></h3><h3 id="dispatch">dispatch</h3><p>类似 effect 中的 <a href="https://www.yuque.com/hele/react/nwb3ff#put" target="_blank">put 方法</a>，你可以在 subscription 的参数、或是一个已经 connect 过的组件的 <code>props</code> 中拿到。</p><p><br /></p><p><br /></p><h3 id="connect">connect</h3><p>通过此方法在你的组件中获取到指定 model 的 state 数据。</p><p><strong>示例</strong>：</p><card type="block" name="codeblock" value="data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20connect%20%7D%20from%20'dva'%3B%5Cnfunction%20App(%7B%20user%2C%20dispatch%20%7D)%20%7B%5Cn%20%20%20%20const%20handleClick%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20dispatch(%7B%20type%3A%20'user%2FfetchUser'%20%7D)%3B%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Ch2%3EHello%2C%20%7Buser%7D%3C%2Fh2%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7BhandleClick%7D%3EClick%20me%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%7D%5Cnexport%20default%20connect((%7B%20user%20%7D)%20%3D%3E%20(%7B%20user%20%7D))(App)%3B%22%7D"></card><p><br /></p><p>以上内容，几乎包括了所有我们在实际项目中会使用到的所有知识。
需要强调的是，文中内容仅仅是我为了让大家便于理解，做了一些简化描述。
相关概念，大家可以在对 umi 稍微熟悉之后，参阅<a href="http://www.umijs.org" target="_blank">官方文档</a>。</p><p><br /></p><p>声明：文中知识体系目录来自开源项目：<a href="https://github.com/dvajs/dva-knowledgemap" target="_blank">dva.js知识导图</a></p><p><br /></p><p><a href="https://github.com/xiaohuoni/umi-course/blob/master/doc/02.md" target="_blank">在 GitHub 上编辑此页</a></p>